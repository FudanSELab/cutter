package cn.icedsoul.cutter.algorithm.asymmetricKMeans;


import java.util.Arrays;

public class AsymmetricKMeans {

    double[][] data;
    //The total distortion.
    double distortion;
    //The vs of each cluster.
    int[] vs;
    //The ws of each cluster.
    int[] ws;
    //D(x, v,w) = αd(x, v) + (1 − α)d(w, x).
    double ALPHA = 0.5;
    //cluster number
    int k;
    //The cluster labels of data.
    int[] y;
    //The number of samples in each cluster.
    int[] size;
    //The total number of samples
    int n;
    //The total dimension
    int d;

    public AsymmetricKMeans(double[][] data, int k) {
        this(data, k, 20);
    }

    public AsymmetricKMeans(double[][] data, int k, int maxIter) {
        this.data = data;
        if (k < 2 ) {
            throw new IllegalArgumentException("Invalid number of clusters: " + k);
        }
        if (maxIter <= 0) {
            throw new IllegalArgumentException("Invalid maximum number of iterations: " + maxIter);
        }

        this.n = data.length;
        if(k > n){
            throw new IllegalArgumentException("Invalid number of clusters: " + k);
        }
        this.y = new int[n];
        this.d = data[0].length;
        this.k = k;
        this.distortion = Double.MAX_VALUE;
        this.size = new int[k];
        this.vs = new int[k];
        this.ws = new int[k];
        //初始化
        for (int i = 0; i < k; i++) {
           vs[i] = i;
           ws[i] = i;
        }

        for (int iter = 1; iter <= maxIter; iter++) {
            adjust();
//            if(!adjust()){
//                break;
//            }
//            if (distortion <= dist) {
//                break;
//            } else {
//                distortion = dist;
//            }
        }
    }


    private boolean adjust(){
        //为每个点寻找最大权重的group
        size = new int[k];
        double max;
        int group = -1;
        for(int i = 0; i < n; i++){
            max = Integer.MIN_VALUE;
            for(int j = 0; j < k; j++){
                double t = functionD(i, vs[j], ws[j]);
                if(t > max){
                    max = t;
                    group = j;
                }
            }
            y[i] = group;
            size[group]++;
        }
        System.out.println("===cluster label:===");
        Arrays.stream(y).forEach(i -> System.out.print(i+" "));
        System.out.println("\n====group size:===");
        Arrays.stream(size).forEach(i -> System.out.print(i+" "));
        System.out.println("\n-----------");

        //更新中心点vs/ws
        boolean hasChanged = false;
        for(int i = 0; i < k; i++){
            double a = Integer.MIN_VALUE, b = Integer.MIN_VALUE;
            int c = -1, d = -1;
            for(int j = 0; j < n; j++){
               if(y[j] == i){
                   double dvj = 0, dwj = 0;
                   for(int p = 0; p < n; p++){
                       if(y[p] == i){
                           dvj += data[p][j];
                           dwj += data[j][p];
                       }
                   }
                   if(dvj > a){
                       a = dvj;
                       c = j;
                   }
                   if(dwj > b){
                       b = dwj;
                       d = j;
                   }
               }
            }
            if(hasChanged){
                vs[i] = c;
                ws[i] = d;
            } else {
                if(vs[i] != c){
                    vs[i] = c;
                    hasChanged = true;
                }
                if(ws[i] != d){
                    ws[i] = d;
                    hasChanged = true;
                }
            }
        }
        System.out.println("===vs===");
        Arrays.stream(vs).forEach(i -> System.out.print(i+" "));
        System.out.println("\n===ws===");
        Arrays.stream(ws).forEach(i -> System.out.print(i+" "));
        System.out.println("\n-----------");

        return false;
    }


    private double functionD(int x, int vj, int wj){
        if(x == vj || wj == x) return Integer.MAX_VALUE;
        return ALPHA * data[x][vj] + (1 - ALPHA) * data[wj][x];
    }

    public int getNumClusters() {
        return k;
    }

    public int[] getClusterLabel() {
        return y;
    }

    public int[] getClusterSize() {
        return size;
    }

    public static void main(String[] args) {
//        double G[][] = new double[8][8];
//        G[0][1] = 3;
//        G[0][2] = 3;
//        G[0][3] = 3;
//        G[1][2] = 3;
//        G[1][3] = 3;
//        G[1][7] = 1;
//        G[2][3] = 3;
//        G[4][5] = 3;
//        G[4][6] = 2;
//        G[4][7] = 2;
//        G[5][6] = 2;
//        G[5][7] = 2;
//
//        G[1][0] = 3;
//        G[2][0] = 3;
//        G[3][0] = 3;
//        G[2][1] = 3;
//        G[3][1] = 3;
//        G[7][1] = 1;
//        G[3][2] = 3;
//        G[5][4] = 3;
//        G[6][4] = 2;
//        G[7][4] = 2;
//        G[6][5] = 2;
//        G[7][5] = 2;

//        double G[][] =
//                {{0.0 ,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0 ,12.0, 452.0, 0.0 ,0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 12.0, 12.0},
//                        {0.0, 0.0, 20070.0, 1510.0, 150.0, 150.0 ,150.0 ,0.0 ,1834.0, 200.0, 200.0, 0.0 ,1100.0, 6550.0 ,18010.0, 2160.0, 400.0, 3200.0, 1100.0, 0.0, 0.0 ,0.0},
//                        {0.0 ,20070.0, 0.0 ,1860.0 ,680.0 ,150.0, 290.0 ,0.0, 1344.0 ,200.0, 200.0, 0.0, 1100.0 ,7050.0, 17410.0 ,2160.0 ,400.0 ,50.0 ,50.0 ,140.0 ,0.0 ,0.0},
//                        {0.0 ,1510.0 ,1860.0, 0.0 ,225.0, 345.0 ,225.0, 0.0 ,164.0, 164.0 ,1240.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0},
//                        {0.0 ,150.0, 680.0 ,225.0, 0.0 ,150.0 ,290.0, 0.0 ,124.0 ,124.0, 904.0, 0.0 ,0.0 ,0.0, 0.0,0.0, 0.0, 0.0, 0.0, 140.0, 0.0 ,0.0},
//                        {0.0, 150.0, 150.0, 345.0 ,150.0 ,0.0 ,150.0 ,0.0, 14.0 ,14.0 ,464.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0},
//                        {0.0 ,150.0, 290.0, 225.0, 290.0 ,150.0 ,0.0 ,0.0 ,12.0, 12.0, 784.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0, 0.0 ,0.0,140.0 ,0.0 ,0.0},
//                        {0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,12.0 ,12.0, 354.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0, 0.0},
//                        {12.0 ,1834.0, 1344.0 ,164.0, 124.0 ,14.0, 12.0, 12.0 ,0.0, 2170.0, 2584.0, 50.0 ,220.0 ,300.0 ,420.0 ,540.0 ,300.0 ,650.0, 50.0 ,12.0 ,0.0 ,0.0},
//                        {12.0, 200.0, 200.0, 164.0 ,124.0 ,14.0 ,12.0, 12.0 ,2170.0 ,0.0 ,2584.0, 50.0 ,220.0 ,300.0 ,420.0, 540.0, 300.0 ,650.0, 50.0 ,12.0, 0.0 ,0.0},
//                        {452.0 ,200.0, 200.0, 1240.0, 904.0 ,464.0, 784.0, 354.0 ,2584.0, 2584.0 ,0.0, 470.0, 220.0, 990.0, 1430.0 ,1210.0, 290.0, 650.0, 0.0 ,342.0 ,12.0, 12.0},
//                        {0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0 ,50.0, 50.0 ,470.0, 0.0 ,0.0, 0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0},
//                        {0.0 ,1100.0, 1100.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0, 220.0 ,220.0, 220.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0},
//                        {0.0 ,6550.0, 7050.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,300.0 ,300.0 ,990.0, 0.0, 0.0 ,0.0, 7050.0, 300.0, 150.0 ,50.0, 50.0 ,0.0, 0.0 ,0.0},
//                        {0.0 ,18010.0 ,17410.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 420.0 ,420.0, 1430.0 ,0.0 ,0.0, 7050.0 ,0.0 ,2160.0, 400.0 ,50.0 ,1100.0 ,0.0, 0.0 ,0.0},
//                        {0.0, 2160.0 ,2160.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0, 540.0 ,540.0 ,1210.0, 0.0 ,0.0 ,300.0 ,2160.0 ,0.0, 400.0, 50.0, 50.0 ,0.0, 0.0 ,0.0},
//                        {0.0 ,400.0, 400.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 300.0, 300.0 ,290.0 ,0.0, 0.0 ,150.0 ,400.0 ,400.0 ,0.0 ,50.0, 50.0 ,0.0 ,0.0, 0.0},
//                        {0.0, 3200.0 ,50.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 650.0 ,650.0 ,650.0, 0.0, 0.0, 50.0, 50.0, 50.0 ,50.0 ,0.0 ,50.0 ,0.0 ,0.0, 0.0},
//                        {0.0 ,1100.0 ,50.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,50.0, 50.0 ,0.0, 0.0 ,0.0 ,50.0, 1100.0, 50.0 ,50.0, 50.0, 0.0 ,0.0 ,0.0, 0.0},
//                        {0.0, 0.0 ,140.0, 0.0 ,140.0 ,0.0 ,140.0 ,0.0 ,12.0 ,12.0 ,342.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0},
//                        {12.0, 0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0, 0.0, 12.0, 0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0 ,12.0},
//                        {12.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0 ,12.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0, 0.0, 12.0, 0.0}};

        double[][] G = {
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.3652411282984531, 0.027479526842584166, 0.00272975432211101, 0.00272975432211101, 0.00272975432211101, 0.0, 0.0, 0.003639672429481347, 0.003639672429481347, 0.020018198362147407, 0.1191992720655141, 0.32775250227479524, 0.039308462238398546, 0.007279344858962694, 0.0, 0.0, 0.05823475887170155, 0.020018198362147407, 0.0, 0.0},
                { 0.0, 0.38812608779733127, 0.0, 0.03596983175401276, 0.013150261071359505, 0.0029007928833881262, 0.005608199574550377, 0.0, 0.0, 0.0038677238445175015, 0.0038677238445175015, 0.02127248114484626, 0.1363372655192419, 0.3366853606652485, 0.041771417520789014, 0.007735447689035003, 0.0, 0.002707406691162251, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.3625450180072029, 0.44657863145258103, 0.0, 0.05402160864345738, 0.08283313325330131, 0.05402160864345738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.09174311926605505, 0.41590214067278286, 0.13761467889908258, 0.0, 0.09174311926605505, 0.17737003058103976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0856269113149847, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.15873015873015872, 0.15873015873015872, 0.36507936507936506, 0.15873015873015872, 0.0, 0.15873015873015872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.12048192771084337, 0.23293172690763053, 0.18072289156626506, 0.23293172690763053, 0.12048192771084337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11244979919678715, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.07782101167315175, 0.07782101167315175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8443579766536965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.3104265402843602, 0.3341232227488152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3341232227488152, 0.014218009478672985, 0.0071090047393364926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.3904183828311294, 0.37741166269239107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1528289616301756, 0.0, 0.04682419249945805, 0.008671146759158898, 0.0, 0.0, 0.0, 0.02384565358768697, 0.0, 0.0},
                { 0.0, 0.3008356545961003, 0.3008356545961003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04178272980501393, 0.3008356545961003, 0.0, 0.055710306406685235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.22857142857142856, 0.22857142857142856, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08571428571428572, 0.22857142857142856, 0.22857142857142856, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
        };
        AsymmetricKMeans a = new AsymmetricKMeans(G, 5);


    }

}
